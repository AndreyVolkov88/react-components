{"version":3,"sources":["Car/Car.js","App.js","serviceWorker.js","index.js"],"names":["props","style","width","alignItems","border","padding","name","year","type","onChange","onChangeName","value","onClick","onDelete","App","state","cars","pageTitle","showCars","toggeleCarsHandler","setState","index","car","this","concat","splice","map","Car","key","event","target","deleteHandler","bind","textAlign","display","flexDirection","margin","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAIe,G,MAAA,SAAAA,GAAK,OAChB,yBAAKC,MAAO,CACRC,MAAO,QACPC,WAAY,SACZC,OAAQ,iBACRC,QAAS,SAET,yCAAeL,EAAMM,MACrB,oCAAS,gCAASN,EAAMO,OACxB,2BAAOC,KAAK,OAAOC,SAAUT,EAAMU,aAAcC,MAAOX,EAAMM,OAC9D,4BAAQM,QAASZ,EAAMa,UAAvB,aCiEOC,E,4MAvEbC,MAAQ,CACNC,KAAM,CACJ,CAACV,KAAM,WAAYC,KAAM,QACzB,CAACD,KAAM,OAAQC,KAAM,QACrB,CAACD,KAAM,UAAWC,KAAM,SAG1BU,UAAW,mBACXC,UAAU,G,EAIZC,mBAAqB,WACnB,EAAKC,SAAS,CACZF,UAAW,EAAKH,MAAMG,Y,2DAKbZ,EAAMe,GACjB,IAAMC,EAAMC,KAAKR,MAAMC,KAAKK,GAC5BC,EAAIhB,KAAOA,EACX,IAAMU,EAAI,YAAOO,KAAKR,MAAMC,MAC5BA,EAAKK,GAASC,EACdC,KAAKH,SAAS,CAACJ,KAAMA,M,oCAGTK,GACZ,IAAML,EAAOO,KAAKR,MAAMC,KAAKQ,SAC7BR,EAAKS,OAAOJ,EAAO,GACnBE,KAAKH,SAAS,CAACJ,W,+BAEP,IAAD,OASHA,EAAO,KAiBX,OAdIO,KAAKR,MAAMG,WACbF,EAAOO,KAAKR,MAAMC,KAAKU,KAAI,SAACJ,EAAKD,GAC7B,OACE,kBAACM,EAAD,CACAC,IAAKP,EACLf,KAAMgB,EAAIhB,KACVC,KAAMe,EAAIf,KACVG,aAAc,SAAAmB,GAAK,OAAI,EAAKnB,aAAamB,EAAMC,OAAOnB,MAAOU,IAC7DR,SAAU,EAAKkB,cAAcC,KAAK,EAAMX,SAO9C,yBAAKpB,MA1BS,CACdgC,UAAW,SACXC,QAAS,OACTC,cAAe,SACfhC,WAAY,SACZiC,OAAQ,cAsBN,4BAAMb,KAAKR,MAAME,WAEjB,4BACEL,QAASW,KAAKJ,oBADhB,eAIEH,O,GApEQqB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAE,EAAF,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.24f058ac.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nexport default props => (\r\n    <div style={{\r\n        width: '500px',\r\n        alignItems: 'center',\r\n        border: '1px solid #ccc',\r\n        padding: '20px'\r\n    }}> \r\n        <h3>Car name: {props.name}</h3>\r\n        <p>Year: <strong>{props.year}</strong></p>\r\n        <input type='text' onChange={props.onChangeName} value={props.name}/>\r\n        <button onClick={props.onDelete}>Delete</button>\r\n    </div>\r\n)\r\n\r\n\r\n\r\n// function car() {\r\n//     return (\r\n//         <div>This is car component</div>\r\n//     )\r\n// }\r\n\r\n// const car = () => {\r\n//     return (\r\n//         <div>This is car component</div>\r\n//     )\r\n// }\r\n\r\n// const car = () => (\r\n// <div>\r\n//     This is car component\r\n//     <strong>test</strong>\r\n// </div>\r\n// )\r\n// export default car","// Next lesson number 4. Теория. Стилизация компонентов Vladilen\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Car from './Car/Car'\n\nclass App extends Component {\n\n  state = {\n    cars: [\n      {name: 'Lexus LX', year: '2018'},\n      {name: 'Audi', year: '2016'},\n      {name: 'Porsche', year: '2020'}\n    ],\n    \n    pageTitle: 'React Components',\n    showCars: false //Cтавим флаг false для переключения состояния кнопки Toggle cars\n  }\n\n  //Функция которая меняет состояние кнопки с false на true\n  toggeleCarsHandler = () => {\n    this.setState({\n      showCars: !this.state.showCars\n    })\n  }\n\n  //Функция смены названия машины\n  onChangeName(name, index) {\n    const car = this.state.cars[index]\n    car.name = name\n    const cars = [...this.state.cars]\n    cars[index] = car\n    this.setState({cars: cars})\n  }\n\n  deleteHandler(index) {\n    const cars = this.state.cars.concat()\n    cars.splice(index, 1)\n    this.setState({cars})\n  }\n  render() {\n    const divStyle ={\n      textAlign: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      margin: '50px auto'\n    }\n\n    let cars = null\n\n    // showCars true, показываем список, иначе null\n    if (this.state.showCars) {\n      cars = this.state.cars.map((car, index) => {\n          return (\n            <Car \n            key={index}\n            name={car.name}\n            year={car.year}\n            onChangeName={event => this.onChangeName(event.target.value, index)}\n            onDelete={this.deleteHandler.bind(this, index)}\n            />\n          )\n      } ) \n  }\n\n    return (\n      <div style={divStyle}>\n        <h1 >{this.state.pageTitle}</h1>\n\n        <button \n          onClick={this.toggeleCarsHandler}// при клике меняем флаг в showCars:  с false на true\n        >Toggle cars</button>\n\n        { cars }\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    < App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}